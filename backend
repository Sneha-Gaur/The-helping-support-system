// === Backend (Node.js + Express + MongoDB) ===
// File: server.js

const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');

const app = express();
app.use(cors());
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/helpingsystem', {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

const issueSchema = new mongoose.Schema({
  name: String,
  category: String,
  description: String,
  village: String,
  contact: String,
  status: { type: String, default: 'Pending' },
});

const Issue = mongoose.model('Issue', issueSchema);

app.post('/api/issues', async (req, res) => {
  const issue = new Issue(req.body);
  await issue.save();
  res.status(201).send(issue);
});

app.get('/api/issues', async (req, res) => {
  const issues = await Issue.find();
  res.send(issues);
});

app.put('/api/issues/:id', async (req, res) => {
  const updated = await Issue.findByIdAndUpdate(req.params.id, req.body, { new: true });
  res.send(updated);
});

app.delete('/api/issues/:id', async (req, res) => {
  await Issue.findByIdAndDelete(req.params.id);
  res.send({ message: 'Issue deleted' });
});

const PORT = 5000;
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));


// === Frontend (React.js + TailwindCSS) ===
// File: App.jsx

import React, { useState, useEffect } from 'react';
import axios from 'axios';

function App() {
  const [issues, setIssues] = useState([]);
  const [formData, setFormData] = useState({
    name: '',
    category: '',
    description: '',
    village: '',
    contact: '',
  });

  const fetchIssues = async () => {
    const res = await axios.get('http://localhost:5000/api/issues');
    setIssues(res.data);
  };

  useEffect(() => {
    fetchIssues();
  }, []);

  const handleChange = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    await axios.post('http://localhost:5000/api/issues', formData);
    fetchIssues();
    setFormData({ name: '', category: '', description: '', village: '', contact: '' });
  };

  const handleDelete = async (id) => {
    await axios.delete(`http://localhost:5000/api/issues/${id}`);
    fetchIssues();
  };

  return (
    <div className="p-4 max-w-4xl mx-auto">
      <h1 className="text-2xl font-bold mb-4">Helping Support System</h1>
      <form onSubmit={handleSubmit} className="grid gap-2 mb-6">
        <input name="name" value={formData.name} onChange={handleChange} placeholder="Your Name" className="border p-2" required />
        <input name="category" value={formData.category} onChange={handleChange} placeholder="Problem Category" className="border p-2" required />
        <textarea name="description" value={formData.description} onChange={handleChange} placeholder="Describe the issue..." className="border p-2" required />
        <input name="village" value={formData.village} onChange={handleChange} placeholder="Village Name" className="border p-2" required />
        <input name="contact" value={formData.contact} onChange={handleChange} placeholder="Contact No." className="border p-2" required />
        <button type="submit" className="bg-green-500 text-white px-4 py-2 rounded">Submit Issue</button>
      </form>

      <h2 className="text-xl font-semibold mb-2">Submitted Issues</h2>
      {issues.map((issue) => (
        <div key={issue._id} className="border p-2 mb-2">
          <p><strong>{issue.name}</strong> reported: {issue.category}</p>
          <p>{issue.description}</p>
          <p>📍 {issue.village} | 📞 {issue.contact} | Status: <strong>{issue.status}</strong></p>
          <button onClick={() => handleDelete(issue._id)} className="text-red-500">Delete</button>
        </div>
      ))}
    </div>
  );
}

export default App;
